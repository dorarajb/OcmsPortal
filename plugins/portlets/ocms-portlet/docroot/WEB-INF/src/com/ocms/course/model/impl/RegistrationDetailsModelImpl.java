/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ocms.course.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.ocms.course.model.RegistrationDetails;
import com.ocms.course.model.RegistrationDetailsModel;
import com.ocms.course.model.RegistrationDetailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RegistrationDetails service. Represents a row in the &quot;CM_RegistrationDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ocms.course.model.RegistrationDetailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RegistrationDetailsImpl}.
 * </p>
 *
 * @author doraraj
 * @see RegistrationDetailsImpl
 * @see com.ocms.course.model.RegistrationDetails
 * @see com.ocms.course.model.RegistrationDetailsModel
 * @generated
 */
@JSON(strict = true)
public class RegistrationDetailsModelImpl extends BaseModelImpl<RegistrationDetails>
	implements RegistrationDetailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a registration details model instance should use the {@link com.ocms.course.model.RegistrationDetails} interface instead.
	 */
	public static final String TABLE_NAME = "CM_RegistrationDetails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "studRegId", Types.BIGINT },
			{ "contactId", Types.BIGINT },
			{ "eventId", Types.BIGINT },
			{ "price", Types.DOUBLE },
			{ "discount", Types.DOUBLE },
			{ "fee", Types.DOUBLE },
			{ "credit", Types.DOUBLE },
			{ "registrationDetailsId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CM_RegistrationDetails (studRegId LONG,contactId LONG,eventId LONG,price DOUBLE,discount DOUBLE,fee DOUBLE,credit DOUBLE,registrationDetailsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CM_RegistrationDetails";
	public static final String ORDER_BY_JPQL = " ORDER BY registrationDetails.registrationDetailsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CM_RegistrationDetails.registrationDetailsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ocms.course.model.RegistrationDetails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ocms.course.model.RegistrationDetails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ocms.course.model.RegistrationDetails"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long REGISTRATIONDETAILSID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RegistrationDetails toModel(RegistrationDetailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RegistrationDetails model = new RegistrationDetailsImpl();

		model.setStudRegId(soapModel.getStudRegId());
		model.setContactId(soapModel.getContactId());
		model.setEventId(soapModel.getEventId());
		model.setPrice(soapModel.getPrice());
		model.setDiscount(soapModel.getDiscount());
		model.setFee(soapModel.getFee());
		model.setCredit(soapModel.getCredit());
		model.setRegistrationDetailsId(soapModel.getRegistrationDetailsId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RegistrationDetails> toModels(
		RegistrationDetailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RegistrationDetails> models = new ArrayList<RegistrationDetails>(soapModels.length);

		for (RegistrationDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ocms.course.model.RegistrationDetails"));

	public RegistrationDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _registrationDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRegistrationDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _registrationDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RegistrationDetails.class;
	}

	@Override
	public String getModelClassName() {
		return RegistrationDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("studRegId", getStudRegId());
		attributes.put("contactId", getContactId());
		attributes.put("eventId", getEventId());
		attributes.put("price", getPrice());
		attributes.put("discount", getDiscount());
		attributes.put("fee", getFee());
		attributes.put("credit", getCredit());
		attributes.put("registrationDetailsId", getRegistrationDetailsId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long studRegId = (Long)attributes.get("studRegId");

		if (studRegId != null) {
			setStudRegId(studRegId);
		}

		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Double discount = (Double)attributes.get("discount");

		if (discount != null) {
			setDiscount(discount);
		}

		Double fee = (Double)attributes.get("fee");

		if (fee != null) {
			setFee(fee);
		}

		Double credit = (Double)attributes.get("credit");

		if (credit != null) {
			setCredit(credit);
		}

		Long registrationDetailsId = (Long)attributes.get(
				"registrationDetailsId");

		if (registrationDetailsId != null) {
			setRegistrationDetailsId(registrationDetailsId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getStudRegId() {
		return _studRegId;
	}

	@Override
	public void setStudRegId(long studRegId) {
		_studRegId = studRegId;
	}

	@JSON
	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_contactId = contactId;
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_eventId = eventId;
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@JSON
	@Override
	public double getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(double discount) {
		_discount = discount;
	}

	@JSON
	@Override
	public double getFee() {
		return _fee;
	}

	@Override
	public void setFee(double fee) {
		_fee = fee;
	}

	@JSON
	@Override
	public double getCredit() {
		return _credit;
	}

	@Override
	public void setCredit(double credit) {
		_credit = credit;
	}

	@JSON
	@Override
	public long getRegistrationDetailsId() {
		return _registrationDetailsId;
	}

	@Override
	public void setRegistrationDetailsId(long registrationDetailsId) {
		_columnBitmask |= REGISTRATIONDETAILSID_COLUMN_BITMASK;

		if (!_setOriginalRegistrationDetailsId) {
			_setOriginalRegistrationDetailsId = true;

			_originalRegistrationDetailsId = _registrationDetailsId;
		}

		_registrationDetailsId = registrationDetailsId;
	}

	public long getOriginalRegistrationDetailsId() {
		return _originalRegistrationDetailsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RegistrationDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RegistrationDetails toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RegistrationDetails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RegistrationDetailsImpl registrationDetailsImpl = new RegistrationDetailsImpl();

		registrationDetailsImpl.setStudRegId(getStudRegId());
		registrationDetailsImpl.setContactId(getContactId());
		registrationDetailsImpl.setEventId(getEventId());
		registrationDetailsImpl.setPrice(getPrice());
		registrationDetailsImpl.setDiscount(getDiscount());
		registrationDetailsImpl.setFee(getFee());
		registrationDetailsImpl.setCredit(getCredit());
		registrationDetailsImpl.setRegistrationDetailsId(getRegistrationDetailsId());
		registrationDetailsImpl.setGroupId(getGroupId());
		registrationDetailsImpl.setCompanyId(getCompanyId());
		registrationDetailsImpl.setUserId(getUserId());
		registrationDetailsImpl.setUserName(getUserName());
		registrationDetailsImpl.setCreateDate(getCreateDate());
		registrationDetailsImpl.setModifiedDate(getModifiedDate());

		registrationDetailsImpl.resetOriginalValues();

		return registrationDetailsImpl;
	}

	@Override
	public int compareTo(RegistrationDetails registrationDetails) {
		long primaryKey = registrationDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RegistrationDetails)) {
			return false;
		}

		RegistrationDetails registrationDetails = (RegistrationDetails)obj;

		long primaryKey = registrationDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RegistrationDetailsModelImpl registrationDetailsModelImpl = this;

		registrationDetailsModelImpl._originalRegistrationDetailsId = registrationDetailsModelImpl._registrationDetailsId;

		registrationDetailsModelImpl._setOriginalRegistrationDetailsId = false;

		registrationDetailsModelImpl._originalGroupId = registrationDetailsModelImpl._groupId;

		registrationDetailsModelImpl._setOriginalGroupId = false;

		registrationDetailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RegistrationDetails> toCacheModel() {
		RegistrationDetailsCacheModel registrationDetailsCacheModel = new RegistrationDetailsCacheModel();

		registrationDetailsCacheModel.studRegId = getStudRegId();

		registrationDetailsCacheModel.contactId = getContactId();

		registrationDetailsCacheModel.eventId = getEventId();

		registrationDetailsCacheModel.price = getPrice();

		registrationDetailsCacheModel.discount = getDiscount();

		registrationDetailsCacheModel.fee = getFee();

		registrationDetailsCacheModel.credit = getCredit();

		registrationDetailsCacheModel.registrationDetailsId = getRegistrationDetailsId();

		registrationDetailsCacheModel.groupId = getGroupId();

		registrationDetailsCacheModel.companyId = getCompanyId();

		registrationDetailsCacheModel.userId = getUserId();

		registrationDetailsCacheModel.userName = getUserName();

		String userName = registrationDetailsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			registrationDetailsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			registrationDetailsCacheModel.createDate = createDate.getTime();
		}
		else {
			registrationDetailsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			registrationDetailsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			registrationDetailsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return registrationDetailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{studRegId=");
		sb.append(getStudRegId());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", discount=");
		sb.append(getDiscount());
		sb.append(", fee=");
		sb.append(getFee());
		sb.append(", credit=");
		sb.append(getCredit());
		sb.append(", registrationDetailsId=");
		sb.append(getRegistrationDetailsId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.ocms.course.model.RegistrationDetails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>studRegId</column-name><column-value><![CDATA[");
		sb.append(getStudRegId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discount</column-name><column-value><![CDATA[");
		sb.append(getDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fee</column-name><column-value><![CDATA[");
		sb.append(getFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>credit</column-name><column-value><![CDATA[");
		sb.append(getCredit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registrationDetailsId</column-name><column-value><![CDATA[");
		sb.append(getRegistrationDetailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RegistrationDetails.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RegistrationDetails.class
		};
	private long _studRegId;
	private long _contactId;
	private long _eventId;
	private double _price;
	private double _discount;
	private double _fee;
	private double _credit;
	private long _registrationDetailsId;
	private long _originalRegistrationDetailsId;
	private boolean _setOriginalRegistrationDetailsId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private RegistrationDetails _escapedModel;
}