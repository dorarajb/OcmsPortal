/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ocms.course.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.ocms.course.model.OffersAndDeductions;
import com.ocms.course.model.OffersAndDeductionsModel;
import com.ocms.course.model.OffersAndDeductionsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OffersAndDeductions service. Represents a row in the &quot;CM_OffersAndDeductions&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ocms.course.model.OffersAndDeductionsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OffersAndDeductionsImpl}.
 * </p>
 *
 * @author doraraj
 * @see OffersAndDeductionsImpl
 * @see com.ocms.course.model.OffersAndDeductions
 * @see com.ocms.course.model.OffersAndDeductionsModel
 * @generated
 */
@JSON(strict = true)
public class OffersAndDeductionsModelImpl extends BaseModelImpl<OffersAndDeductions>
	implements OffersAndDeductionsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a offers and deductions model instance should use the {@link com.ocms.course.model.OffersAndDeductions} interface instead.
	 */
	public static final String TABLE_NAME = "CM_OffersAndDeductions";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "code_", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "amount", Types.BIGINT },
			{ "active_", Types.INTEGER },
			{ "effectiveFromDate", Types.TIMESTAMP },
			{ "effectivetoDate", Types.TIMESTAMP },
			{ "type_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CM_OffersAndDeductions (id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,code_ VARCHAR(75) null,description VARCHAR(75) null,amount LONG,active_ INTEGER,effectiveFromDate DATE null,effectivetoDate DATE null,type_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CM_OffersAndDeductions";
	public static final String ORDER_BY_JPQL = " ORDER BY offersAndDeductions.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CM_OffersAndDeductions.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ocms.course.model.OffersAndDeductions"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ocms.course.model.OffersAndDeductions"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ocms.course.model.OffersAndDeductions"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long CODE_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;
	public static long TYPE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OffersAndDeductions toModel(OffersAndDeductionsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OffersAndDeductions model = new OffersAndDeductionsImpl();

		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCode(soapModel.getCode());
		model.setDescription(soapModel.getDescription());
		model.setAmount(soapModel.getAmount());
		model.setActive(soapModel.getActive());
		model.setEffectiveFromDate(soapModel.getEffectiveFromDate());
		model.setEffectivetoDate(soapModel.getEffectivetoDate());
		model.setType(soapModel.getType());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OffersAndDeductions> toModels(
		OffersAndDeductionsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OffersAndDeductions> models = new ArrayList<OffersAndDeductions>(soapModels.length);

		for (OffersAndDeductionsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ocms.course.model.OffersAndDeductions"));

	public OffersAndDeductionsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OffersAndDeductions.class;
	}

	@Override
	public String getModelClassName() {
		return OffersAndDeductions.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("code", getCode());
		attributes.put("description", getDescription());
		attributes.put("amount", getAmount());
		attributes.put("active", getActive());
		attributes.put("effectiveFromDate", getEffectiveFromDate());
		attributes.put("effectivetoDate", getEffectivetoDate());
		attributes.put("type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long amount = (Long)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Integer active = (Integer)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date effectiveFromDate = (Date)attributes.get("effectiveFromDate");

		if (effectiveFromDate != null) {
			setEffectiveFromDate(effectiveFromDate);
		}

		Date effectivetoDate = (Date)attributes.get("effectivetoDate");

		if (effectivetoDate != null) {
			setEffectivetoDate(effectivetoDate);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(long amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public int getActive() {
		return _active;
	}

	@Override
	public void setActive(int active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public int getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public Date getEffectiveFromDate() {
		return _effectiveFromDate;
	}

	@Override
	public void setEffectiveFromDate(Date effectiveFromDate) {
		_effectiveFromDate = effectiveFromDate;
	}

	@JSON
	@Override
	public Date getEffectivetoDate() {
		return _effectivetoDate;
	}

	@Override
	public void setEffectivetoDate(Date effectivetoDate) {
		_effectivetoDate = effectivetoDate;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OffersAndDeductions.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OffersAndDeductions toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OffersAndDeductions)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OffersAndDeductionsImpl offersAndDeductionsImpl = new OffersAndDeductionsImpl();

		offersAndDeductionsImpl.setId(getId());
		offersAndDeductionsImpl.setGroupId(getGroupId());
		offersAndDeductionsImpl.setCompanyId(getCompanyId());
		offersAndDeductionsImpl.setUserId(getUserId());
		offersAndDeductionsImpl.setUserName(getUserName());
		offersAndDeductionsImpl.setCreateDate(getCreateDate());
		offersAndDeductionsImpl.setModifiedDate(getModifiedDate());
		offersAndDeductionsImpl.setCode(getCode());
		offersAndDeductionsImpl.setDescription(getDescription());
		offersAndDeductionsImpl.setAmount(getAmount());
		offersAndDeductionsImpl.setActive(getActive());
		offersAndDeductionsImpl.setEffectiveFromDate(getEffectiveFromDate());
		offersAndDeductionsImpl.setEffectivetoDate(getEffectivetoDate());
		offersAndDeductionsImpl.setType(getType());

		offersAndDeductionsImpl.resetOriginalValues();

		return offersAndDeductionsImpl;
	}

	@Override
	public int compareTo(OffersAndDeductions offersAndDeductions) {
		long primaryKey = offersAndDeductions.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OffersAndDeductions)) {
			return false;
		}

		OffersAndDeductions offersAndDeductions = (OffersAndDeductions)obj;

		long primaryKey = offersAndDeductions.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OffersAndDeductionsModelImpl offersAndDeductionsModelImpl = this;

		offersAndDeductionsModelImpl._originalId = offersAndDeductionsModelImpl._id;

		offersAndDeductionsModelImpl._setOriginalId = false;

		offersAndDeductionsModelImpl._originalGroupId = offersAndDeductionsModelImpl._groupId;

		offersAndDeductionsModelImpl._setOriginalGroupId = false;

		offersAndDeductionsModelImpl._originalCode = offersAndDeductionsModelImpl._code;

		offersAndDeductionsModelImpl._originalActive = offersAndDeductionsModelImpl._active;

		offersAndDeductionsModelImpl._setOriginalActive = false;

		offersAndDeductionsModelImpl._originalType = offersAndDeductionsModelImpl._type;

		offersAndDeductionsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OffersAndDeductions> toCacheModel() {
		OffersAndDeductionsCacheModel offersAndDeductionsCacheModel = new OffersAndDeductionsCacheModel();

		offersAndDeductionsCacheModel.id = getId();

		offersAndDeductionsCacheModel.groupId = getGroupId();

		offersAndDeductionsCacheModel.companyId = getCompanyId();

		offersAndDeductionsCacheModel.userId = getUserId();

		offersAndDeductionsCacheModel.userName = getUserName();

		String userName = offersAndDeductionsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			offersAndDeductionsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			offersAndDeductionsCacheModel.createDate = createDate.getTime();
		}
		else {
			offersAndDeductionsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			offersAndDeductionsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			offersAndDeductionsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		offersAndDeductionsCacheModel.code = getCode();

		String code = offersAndDeductionsCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			offersAndDeductionsCacheModel.code = null;
		}

		offersAndDeductionsCacheModel.description = getDescription();

		String description = offersAndDeductionsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			offersAndDeductionsCacheModel.description = null;
		}

		offersAndDeductionsCacheModel.amount = getAmount();

		offersAndDeductionsCacheModel.active = getActive();

		Date effectiveFromDate = getEffectiveFromDate();

		if (effectiveFromDate != null) {
			offersAndDeductionsCacheModel.effectiveFromDate = effectiveFromDate.getTime();
		}
		else {
			offersAndDeductionsCacheModel.effectiveFromDate = Long.MIN_VALUE;
		}

		Date effectivetoDate = getEffectivetoDate();

		if (effectivetoDate != null) {
			offersAndDeductionsCacheModel.effectivetoDate = effectivetoDate.getTime();
		}
		else {
			offersAndDeductionsCacheModel.effectivetoDate = Long.MIN_VALUE;
		}

		offersAndDeductionsCacheModel.type = getType();

		String type = offersAndDeductionsCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			offersAndDeductionsCacheModel.type = null;
		}

		return offersAndDeductionsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", effectiveFromDate=");
		sb.append(getEffectiveFromDate());
		sb.append(", effectivetoDate=");
		sb.append(getEffectivetoDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.ocms.course.model.OffersAndDeductions");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveFromDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectivetoDate</column-name><column-value><![CDATA[");
		sb.append(getEffectivetoDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OffersAndDeductions.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OffersAndDeductions.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _code;
	private String _originalCode;
	private String _description;
	private long _amount;
	private int _active;
	private int _originalActive;
	private boolean _setOriginalActive;
	private Date _effectiveFromDate;
	private Date _effectivetoDate;
	private String _type;
	private String _originalType;
	private long _columnBitmask;
	private OffersAndDeductions _escapedModel;
}