/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ocms.course.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.ocms.course.model.Event;
import com.ocms.course.service.EventLocalService;
import com.ocms.course.service.persistence.ContactPersistence;
import com.ocms.course.service.persistence.CoursePackagePersistence;
import com.ocms.course.service.persistence.CoursePersistence;
import com.ocms.course.service.persistence.CourseSeriesPersistence;
import com.ocms.course.service.persistence.EventPersistence;
import com.ocms.course.service.persistence.LocationPersistence;
import com.ocms.course.service.persistence.OffersAndDeductionsPersistence;
import com.ocms.course.service.persistence.PricingPersistence;
import com.ocms.course.service.persistence.RegistrationDetailsPersistence;
import com.ocms.course.service.persistence.StudentRegistrationPersistence;
import com.ocms.course.service.persistence.TaxDetailsPersistence;
import com.ocms.course.service.persistence.TaxTypesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the event local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ocms.course.service.impl.EventLocalServiceImpl}.
 * </p>
 *
 * @author doraraj
 * @see com.ocms.course.service.impl.EventLocalServiceImpl
 * @see com.ocms.course.service.EventLocalServiceUtil
 * @generated
 */
public abstract class EventLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements EventLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ocms.course.service.EventLocalServiceUtil} to access the event local service.
	 */

	/**
	 * Adds the event to the database. Also notifies the appropriate model listeners.
	 *
	 * @param event the event
	 * @return the event that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Event addEvent(Event event) throws SystemException {
		event.setNew(true);

		return eventPersistence.update(event);
	}

	/**
	 * Creates a new event with the primary key. Does not add the event to the database.
	 *
	 * @param eventId the primary key for the new event
	 * @return the new event
	 */
	@Override
	public Event createEvent(long eventId) {
		return eventPersistence.create(eventId);
	}

	/**
	 * Deletes the event with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param eventId the primary key of the event
	 * @return the event that was removed
	 * @throws PortalException if a event with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Event deleteEvent(long eventId)
		throws PortalException, SystemException {
		return eventPersistence.remove(eventId);
	}

	/**
	 * Deletes the event from the database. Also notifies the appropriate model listeners.
	 *
	 * @param event the event
	 * @return the event that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Event deleteEvent(Event event) throws SystemException {
		return eventPersistence.remove(event);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Event.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return eventPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ocms.course.model.impl.EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return eventPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ocms.course.model.impl.EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return eventPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return eventPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return eventPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Event fetchEvent(long eventId) throws SystemException {
		return eventPersistence.fetchByPrimaryKey(eventId);
	}

	/**
	 * Returns the event with the primary key.
	 *
	 * @param eventId the primary key of the event
	 * @return the event
	 * @throws PortalException if a event with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Event getEvent(long eventId) throws PortalException, SystemException {
		return eventPersistence.findByPrimaryKey(eventId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return eventPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the events.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ocms.course.model.impl.EventModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of events
	 * @param end the upper bound of the range of events (not inclusive)
	 * @return the range of events
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Event> getEvents(int start, int end) throws SystemException {
		return eventPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of events.
	 *
	 * @return the number of events
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEventsCount() throws SystemException {
		return eventPersistence.countAll();
	}

	/**
	 * Updates the event in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param event the event
	 * @return the event that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Event updateEvent(Event event) throws SystemException {
		return eventPersistence.update(event);
	}

	/**
	 * Returns the contact local service.
	 *
	 * @return the contact local service
	 */
	public com.ocms.course.service.ContactLocalService getContactLocalService() {
		return contactLocalService;
	}

	/**
	 * Sets the contact local service.
	 *
	 * @param contactLocalService the contact local service
	 */
	public void setContactLocalService(
		com.ocms.course.service.ContactLocalService contactLocalService) {
		this.contactLocalService = contactLocalService;
	}

	/**
	 * Returns the contact remote service.
	 *
	 * @return the contact remote service
	 */
	public com.ocms.course.service.ContactService getContactService() {
		return contactService;
	}

	/**
	 * Sets the contact remote service.
	 *
	 * @param contactService the contact remote service
	 */
	public void setContactService(
		com.ocms.course.service.ContactService contactService) {
		this.contactService = contactService;
	}

	/**
	 * Returns the contact persistence.
	 *
	 * @return the contact persistence
	 */
	public ContactPersistence getContactPersistence() {
		return contactPersistence;
	}

	/**
	 * Sets the contact persistence.
	 *
	 * @param contactPersistence the contact persistence
	 */
	public void setContactPersistence(ContactPersistence contactPersistence) {
		this.contactPersistence = contactPersistence;
	}

	/**
	 * Returns the course local service.
	 *
	 * @return the course local service
	 */
	public com.ocms.course.service.CourseLocalService getCourseLocalService() {
		return courseLocalService;
	}

	/**
	 * Sets the course local service.
	 *
	 * @param courseLocalService the course local service
	 */
	public void setCourseLocalService(
		com.ocms.course.service.CourseLocalService courseLocalService) {
		this.courseLocalService = courseLocalService;
	}

	/**
	 * Returns the course remote service.
	 *
	 * @return the course remote service
	 */
	public com.ocms.course.service.CourseService getCourseService() {
		return courseService;
	}

	/**
	 * Sets the course remote service.
	 *
	 * @param courseService the course remote service
	 */
	public void setCourseService(
		com.ocms.course.service.CourseService courseService) {
		this.courseService = courseService;
	}

	/**
	 * Returns the course persistence.
	 *
	 * @return the course persistence
	 */
	public CoursePersistence getCoursePersistence() {
		return coursePersistence;
	}

	/**
	 * Sets the course persistence.
	 *
	 * @param coursePersistence the course persistence
	 */
	public void setCoursePersistence(CoursePersistence coursePersistence) {
		this.coursePersistence = coursePersistence;
	}

	/**
	 * Returns the course package local service.
	 *
	 * @return the course package local service
	 */
	public com.ocms.course.service.CoursePackageLocalService getCoursePackageLocalService() {
		return coursePackageLocalService;
	}

	/**
	 * Sets the course package local service.
	 *
	 * @param coursePackageLocalService the course package local service
	 */
	public void setCoursePackageLocalService(
		com.ocms.course.service.CoursePackageLocalService coursePackageLocalService) {
		this.coursePackageLocalService = coursePackageLocalService;
	}

	/**
	 * Returns the course package remote service.
	 *
	 * @return the course package remote service
	 */
	public com.ocms.course.service.CoursePackageService getCoursePackageService() {
		return coursePackageService;
	}

	/**
	 * Sets the course package remote service.
	 *
	 * @param coursePackageService the course package remote service
	 */
	public void setCoursePackageService(
		com.ocms.course.service.CoursePackageService coursePackageService) {
		this.coursePackageService = coursePackageService;
	}

	/**
	 * Returns the course package persistence.
	 *
	 * @return the course package persistence
	 */
	public CoursePackagePersistence getCoursePackagePersistence() {
		return coursePackagePersistence;
	}

	/**
	 * Sets the course package persistence.
	 *
	 * @param coursePackagePersistence the course package persistence
	 */
	public void setCoursePackagePersistence(
		CoursePackagePersistence coursePackagePersistence) {
		this.coursePackagePersistence = coursePackagePersistence;
	}

	/**
	 * Returns the course series local service.
	 *
	 * @return the course series local service
	 */
	public com.ocms.course.service.CourseSeriesLocalService getCourseSeriesLocalService() {
		return courseSeriesLocalService;
	}

	/**
	 * Sets the course series local service.
	 *
	 * @param courseSeriesLocalService the course series local service
	 */
	public void setCourseSeriesLocalService(
		com.ocms.course.service.CourseSeriesLocalService courseSeriesLocalService) {
		this.courseSeriesLocalService = courseSeriesLocalService;
	}

	/**
	 * Returns the course series remote service.
	 *
	 * @return the course series remote service
	 */
	public com.ocms.course.service.CourseSeriesService getCourseSeriesService() {
		return courseSeriesService;
	}

	/**
	 * Sets the course series remote service.
	 *
	 * @param courseSeriesService the course series remote service
	 */
	public void setCourseSeriesService(
		com.ocms.course.service.CourseSeriesService courseSeriesService) {
		this.courseSeriesService = courseSeriesService;
	}

	/**
	 * Returns the course series persistence.
	 *
	 * @return the course series persistence
	 */
	public CourseSeriesPersistence getCourseSeriesPersistence() {
		return courseSeriesPersistence;
	}

	/**
	 * Sets the course series persistence.
	 *
	 * @param courseSeriesPersistence the course series persistence
	 */
	public void setCourseSeriesPersistence(
		CourseSeriesPersistence courseSeriesPersistence) {
		this.courseSeriesPersistence = courseSeriesPersistence;
	}

	/**
	 * Returns the event local service.
	 *
	 * @return the event local service
	 */
	public com.ocms.course.service.EventLocalService getEventLocalService() {
		return eventLocalService;
	}

	/**
	 * Sets the event local service.
	 *
	 * @param eventLocalService the event local service
	 */
	public void setEventLocalService(
		com.ocms.course.service.EventLocalService eventLocalService) {
		this.eventLocalService = eventLocalService;
	}

	/**
	 * Returns the event remote service.
	 *
	 * @return the event remote service
	 */
	public com.ocms.course.service.EventService getEventService() {
		return eventService;
	}

	/**
	 * Sets the event remote service.
	 *
	 * @param eventService the event remote service
	 */
	public void setEventService(
		com.ocms.course.service.EventService eventService) {
		this.eventService = eventService;
	}

	/**
	 * Returns the event persistence.
	 *
	 * @return the event persistence
	 */
	public EventPersistence getEventPersistence() {
		return eventPersistence;
	}

	/**
	 * Sets the event persistence.
	 *
	 * @param eventPersistence the event persistence
	 */
	public void setEventPersistence(EventPersistence eventPersistence) {
		this.eventPersistence = eventPersistence;
	}

	/**
	 * Returns the location local service.
	 *
	 * @return the location local service
	 */
	public com.ocms.course.service.LocationLocalService getLocationLocalService() {
		return locationLocalService;
	}

	/**
	 * Sets the location local service.
	 *
	 * @param locationLocalService the location local service
	 */
	public void setLocationLocalService(
		com.ocms.course.service.LocationLocalService locationLocalService) {
		this.locationLocalService = locationLocalService;
	}

	/**
	 * Returns the location remote service.
	 *
	 * @return the location remote service
	 */
	public com.ocms.course.service.LocationService getLocationService() {
		return locationService;
	}

	/**
	 * Sets the location remote service.
	 *
	 * @param locationService the location remote service
	 */
	public void setLocationService(
		com.ocms.course.service.LocationService locationService) {
		this.locationService = locationService;
	}

	/**
	 * Returns the location persistence.
	 *
	 * @return the location persistence
	 */
	public LocationPersistence getLocationPersistence() {
		return locationPersistence;
	}

	/**
	 * Sets the location persistence.
	 *
	 * @param locationPersistence the location persistence
	 */
	public void setLocationPersistence(LocationPersistence locationPersistence) {
		this.locationPersistence = locationPersistence;
	}

	/**
	 * Returns the offers and deductions local service.
	 *
	 * @return the offers and deductions local service
	 */
	public com.ocms.course.service.OffersAndDeductionsLocalService getOffersAndDeductionsLocalService() {
		return offersAndDeductionsLocalService;
	}

	/**
	 * Sets the offers and deductions local service.
	 *
	 * @param offersAndDeductionsLocalService the offers and deductions local service
	 */
	public void setOffersAndDeductionsLocalService(
		com.ocms.course.service.OffersAndDeductionsLocalService offersAndDeductionsLocalService) {
		this.offersAndDeductionsLocalService = offersAndDeductionsLocalService;
	}

	/**
	 * Returns the offers and deductions remote service.
	 *
	 * @return the offers and deductions remote service
	 */
	public com.ocms.course.service.OffersAndDeductionsService getOffersAndDeductionsService() {
		return offersAndDeductionsService;
	}

	/**
	 * Sets the offers and deductions remote service.
	 *
	 * @param offersAndDeductionsService the offers and deductions remote service
	 */
	public void setOffersAndDeductionsService(
		com.ocms.course.service.OffersAndDeductionsService offersAndDeductionsService) {
		this.offersAndDeductionsService = offersAndDeductionsService;
	}

	/**
	 * Returns the offers and deductions persistence.
	 *
	 * @return the offers and deductions persistence
	 */
	public OffersAndDeductionsPersistence getOffersAndDeductionsPersistence() {
		return offersAndDeductionsPersistence;
	}

	/**
	 * Sets the offers and deductions persistence.
	 *
	 * @param offersAndDeductionsPersistence the offers and deductions persistence
	 */
	public void setOffersAndDeductionsPersistence(
		OffersAndDeductionsPersistence offersAndDeductionsPersistence) {
		this.offersAndDeductionsPersistence = offersAndDeductionsPersistence;
	}

	/**
	 * Returns the pricing local service.
	 *
	 * @return the pricing local service
	 */
	public com.ocms.course.service.PricingLocalService getPricingLocalService() {
		return pricingLocalService;
	}

	/**
	 * Sets the pricing local service.
	 *
	 * @param pricingLocalService the pricing local service
	 */
	public void setPricingLocalService(
		com.ocms.course.service.PricingLocalService pricingLocalService) {
		this.pricingLocalService = pricingLocalService;
	}

	/**
	 * Returns the pricing remote service.
	 *
	 * @return the pricing remote service
	 */
	public com.ocms.course.service.PricingService getPricingService() {
		return pricingService;
	}

	/**
	 * Sets the pricing remote service.
	 *
	 * @param pricingService the pricing remote service
	 */
	public void setPricingService(
		com.ocms.course.service.PricingService pricingService) {
		this.pricingService = pricingService;
	}

	/**
	 * Returns the pricing persistence.
	 *
	 * @return the pricing persistence
	 */
	public PricingPersistence getPricingPersistence() {
		return pricingPersistence;
	}

	/**
	 * Sets the pricing persistence.
	 *
	 * @param pricingPersistence the pricing persistence
	 */
	public void setPricingPersistence(PricingPersistence pricingPersistence) {
		this.pricingPersistence = pricingPersistence;
	}

	/**
	 * Returns the registration details local service.
	 *
	 * @return the registration details local service
	 */
	public com.ocms.course.service.RegistrationDetailsLocalService getRegistrationDetailsLocalService() {
		return registrationDetailsLocalService;
	}

	/**
	 * Sets the registration details local service.
	 *
	 * @param registrationDetailsLocalService the registration details local service
	 */
	public void setRegistrationDetailsLocalService(
		com.ocms.course.service.RegistrationDetailsLocalService registrationDetailsLocalService) {
		this.registrationDetailsLocalService = registrationDetailsLocalService;
	}

	/**
	 * Returns the registration details remote service.
	 *
	 * @return the registration details remote service
	 */
	public com.ocms.course.service.RegistrationDetailsService getRegistrationDetailsService() {
		return registrationDetailsService;
	}

	/**
	 * Sets the registration details remote service.
	 *
	 * @param registrationDetailsService the registration details remote service
	 */
	public void setRegistrationDetailsService(
		com.ocms.course.service.RegistrationDetailsService registrationDetailsService) {
		this.registrationDetailsService = registrationDetailsService;
	}

	/**
	 * Returns the registration details persistence.
	 *
	 * @return the registration details persistence
	 */
	public RegistrationDetailsPersistence getRegistrationDetailsPersistence() {
		return registrationDetailsPersistence;
	}

	/**
	 * Sets the registration details persistence.
	 *
	 * @param registrationDetailsPersistence the registration details persistence
	 */
	public void setRegistrationDetailsPersistence(
		RegistrationDetailsPersistence registrationDetailsPersistence) {
		this.registrationDetailsPersistence = registrationDetailsPersistence;
	}

	/**
	 * Returns the student registration local service.
	 *
	 * @return the student registration local service
	 */
	public com.ocms.course.service.StudentRegistrationLocalService getStudentRegistrationLocalService() {
		return studentRegistrationLocalService;
	}

	/**
	 * Sets the student registration local service.
	 *
	 * @param studentRegistrationLocalService the student registration local service
	 */
	public void setStudentRegistrationLocalService(
		com.ocms.course.service.StudentRegistrationLocalService studentRegistrationLocalService) {
		this.studentRegistrationLocalService = studentRegistrationLocalService;
	}

	/**
	 * Returns the student registration remote service.
	 *
	 * @return the student registration remote service
	 */
	public com.ocms.course.service.StudentRegistrationService getStudentRegistrationService() {
		return studentRegistrationService;
	}

	/**
	 * Sets the student registration remote service.
	 *
	 * @param studentRegistrationService the student registration remote service
	 */
	public void setStudentRegistrationService(
		com.ocms.course.service.StudentRegistrationService studentRegistrationService) {
		this.studentRegistrationService = studentRegistrationService;
	}

	/**
	 * Returns the student registration persistence.
	 *
	 * @return the student registration persistence
	 */
	public StudentRegistrationPersistence getStudentRegistrationPersistence() {
		return studentRegistrationPersistence;
	}

	/**
	 * Sets the student registration persistence.
	 *
	 * @param studentRegistrationPersistence the student registration persistence
	 */
	public void setStudentRegistrationPersistence(
		StudentRegistrationPersistence studentRegistrationPersistence) {
		this.studentRegistrationPersistence = studentRegistrationPersistence;
	}

	/**
	 * Returns the tax details local service.
	 *
	 * @return the tax details local service
	 */
	public com.ocms.course.service.TaxDetailsLocalService getTaxDetailsLocalService() {
		return taxDetailsLocalService;
	}

	/**
	 * Sets the tax details local service.
	 *
	 * @param taxDetailsLocalService the tax details local service
	 */
	public void setTaxDetailsLocalService(
		com.ocms.course.service.TaxDetailsLocalService taxDetailsLocalService) {
		this.taxDetailsLocalService = taxDetailsLocalService;
	}

	/**
	 * Returns the tax details remote service.
	 *
	 * @return the tax details remote service
	 */
	public com.ocms.course.service.TaxDetailsService getTaxDetailsService() {
		return taxDetailsService;
	}

	/**
	 * Sets the tax details remote service.
	 *
	 * @param taxDetailsService the tax details remote service
	 */
	public void setTaxDetailsService(
		com.ocms.course.service.TaxDetailsService taxDetailsService) {
		this.taxDetailsService = taxDetailsService;
	}

	/**
	 * Returns the tax details persistence.
	 *
	 * @return the tax details persistence
	 */
	public TaxDetailsPersistence getTaxDetailsPersistence() {
		return taxDetailsPersistence;
	}

	/**
	 * Sets the tax details persistence.
	 *
	 * @param taxDetailsPersistence the tax details persistence
	 */
	public void setTaxDetailsPersistence(
		TaxDetailsPersistence taxDetailsPersistence) {
		this.taxDetailsPersistence = taxDetailsPersistence;
	}

	/**
	 * Returns the tax types local service.
	 *
	 * @return the tax types local service
	 */
	public com.ocms.course.service.TaxTypesLocalService getTaxTypesLocalService() {
		return taxTypesLocalService;
	}

	/**
	 * Sets the tax types local service.
	 *
	 * @param taxTypesLocalService the tax types local service
	 */
	public void setTaxTypesLocalService(
		com.ocms.course.service.TaxTypesLocalService taxTypesLocalService) {
		this.taxTypesLocalService = taxTypesLocalService;
	}

	/**
	 * Returns the tax types remote service.
	 *
	 * @return the tax types remote service
	 */
	public com.ocms.course.service.TaxTypesService getTaxTypesService() {
		return taxTypesService;
	}

	/**
	 * Sets the tax types remote service.
	 *
	 * @param taxTypesService the tax types remote service
	 */
	public void setTaxTypesService(
		com.ocms.course.service.TaxTypesService taxTypesService) {
		this.taxTypesService = taxTypesService;
	}

	/**
	 * Returns the tax types persistence.
	 *
	 * @return the tax types persistence
	 */
	public TaxTypesPersistence getTaxTypesPersistence() {
		return taxTypesPersistence;
	}

	/**
	 * Sets the tax types persistence.
	 *
	 * @param taxTypesPersistence the tax types persistence
	 */
	public void setTaxTypesPersistence(TaxTypesPersistence taxTypesPersistence) {
		this.taxTypesPersistence = taxTypesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.ocms.course.model.Event",
			eventLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.ocms.course.model.Event");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Event.class;
	}

	protected String getModelClassName() {
		return Event.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = eventPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.ocms.course.service.ContactLocalService.class)
	protected com.ocms.course.service.ContactLocalService contactLocalService;
	@BeanReference(type = com.ocms.course.service.ContactService.class)
	protected com.ocms.course.service.ContactService contactService;
	@BeanReference(type = ContactPersistence.class)
	protected ContactPersistence contactPersistence;
	@BeanReference(type = com.ocms.course.service.CourseLocalService.class)
	protected com.ocms.course.service.CourseLocalService courseLocalService;
	@BeanReference(type = com.ocms.course.service.CourseService.class)
	protected com.ocms.course.service.CourseService courseService;
	@BeanReference(type = CoursePersistence.class)
	protected CoursePersistence coursePersistence;
	@BeanReference(type = com.ocms.course.service.CoursePackageLocalService.class)
	protected com.ocms.course.service.CoursePackageLocalService coursePackageLocalService;
	@BeanReference(type = com.ocms.course.service.CoursePackageService.class)
	protected com.ocms.course.service.CoursePackageService coursePackageService;
	@BeanReference(type = CoursePackagePersistence.class)
	protected CoursePackagePersistence coursePackagePersistence;
	@BeanReference(type = com.ocms.course.service.CourseSeriesLocalService.class)
	protected com.ocms.course.service.CourseSeriesLocalService courseSeriesLocalService;
	@BeanReference(type = com.ocms.course.service.CourseSeriesService.class)
	protected com.ocms.course.service.CourseSeriesService courseSeriesService;
	@BeanReference(type = CourseSeriesPersistence.class)
	protected CourseSeriesPersistence courseSeriesPersistence;
	@BeanReference(type = com.ocms.course.service.EventLocalService.class)
	protected com.ocms.course.service.EventLocalService eventLocalService;
	@BeanReference(type = com.ocms.course.service.EventService.class)
	protected com.ocms.course.service.EventService eventService;
	@BeanReference(type = EventPersistence.class)
	protected EventPersistence eventPersistence;
	@BeanReference(type = com.ocms.course.service.LocationLocalService.class)
	protected com.ocms.course.service.LocationLocalService locationLocalService;
	@BeanReference(type = com.ocms.course.service.LocationService.class)
	protected com.ocms.course.service.LocationService locationService;
	@BeanReference(type = LocationPersistence.class)
	protected LocationPersistence locationPersistence;
	@BeanReference(type = com.ocms.course.service.OffersAndDeductionsLocalService.class)
	protected com.ocms.course.service.OffersAndDeductionsLocalService offersAndDeductionsLocalService;
	@BeanReference(type = com.ocms.course.service.OffersAndDeductionsService.class)
	protected com.ocms.course.service.OffersAndDeductionsService offersAndDeductionsService;
	@BeanReference(type = OffersAndDeductionsPersistence.class)
	protected OffersAndDeductionsPersistence offersAndDeductionsPersistence;
	@BeanReference(type = com.ocms.course.service.PricingLocalService.class)
	protected com.ocms.course.service.PricingLocalService pricingLocalService;
	@BeanReference(type = com.ocms.course.service.PricingService.class)
	protected com.ocms.course.service.PricingService pricingService;
	@BeanReference(type = PricingPersistence.class)
	protected PricingPersistence pricingPersistence;
	@BeanReference(type = com.ocms.course.service.RegistrationDetailsLocalService.class)
	protected com.ocms.course.service.RegistrationDetailsLocalService registrationDetailsLocalService;
	@BeanReference(type = com.ocms.course.service.RegistrationDetailsService.class)
	protected com.ocms.course.service.RegistrationDetailsService registrationDetailsService;
	@BeanReference(type = RegistrationDetailsPersistence.class)
	protected RegistrationDetailsPersistence registrationDetailsPersistence;
	@BeanReference(type = com.ocms.course.service.StudentRegistrationLocalService.class)
	protected com.ocms.course.service.StudentRegistrationLocalService studentRegistrationLocalService;
	@BeanReference(type = com.ocms.course.service.StudentRegistrationService.class)
	protected com.ocms.course.service.StudentRegistrationService studentRegistrationService;
	@BeanReference(type = StudentRegistrationPersistence.class)
	protected StudentRegistrationPersistence studentRegistrationPersistence;
	@BeanReference(type = com.ocms.course.service.TaxDetailsLocalService.class)
	protected com.ocms.course.service.TaxDetailsLocalService taxDetailsLocalService;
	@BeanReference(type = com.ocms.course.service.TaxDetailsService.class)
	protected com.ocms.course.service.TaxDetailsService taxDetailsService;
	@BeanReference(type = TaxDetailsPersistence.class)
	protected TaxDetailsPersistence taxDetailsPersistence;
	@BeanReference(type = com.ocms.course.service.TaxTypesLocalService.class)
	protected com.ocms.course.service.TaxTypesLocalService taxTypesLocalService;
	@BeanReference(type = com.ocms.course.service.TaxTypesService.class)
	protected com.ocms.course.service.TaxTypesService taxTypesService;
	@BeanReference(type = TaxTypesPersistence.class)
	protected TaxTypesPersistence taxTypesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EventLocalServiceClpInvoker _clpInvoker = new EventLocalServiceClpInvoker();
}